import React, { useState, useEffect } from 'react';
import { LineChart, Line, BarChart, Bar, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';
import { analyticsAPI } from '../services/analyticsAPI';
import FollowUpDashboard from '../components/FollowUpDashboard';

const Dashboard = () => {
  const [dashboardData, setDashboardData] = useState(null);
  const [engagementTrends, setEngagementTrends] = useState([]);
  const [interactionStats, setInteractionStats] = useState([]);
  const [recentActivity, setRecentActivity] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [selectedPeriod, setSelectedPeriod] = useState('month');

  useEffect(() => {
    loadDashboardData();
  }, [selectedPeriod]);

  const loadDashboardData = async () => {
    try {
      setLoading(true);
      const [dashboard, trends, stats, activity] = await Promise.all([
        analyticsAPI.getDashboardData(),
        analyticsAPI.getEngagementTrends(30),
        analyticsAPI.getInteractionStats(selectedPeriod),
        analyticsAPI.getRecentActivity(10)
      ]);

      setDashboardData(dashboard);
      setEngagementTrends(trends);
      setInteractionStats(stats);
      setRecentActivity(activity);
    } catch (err) {
      setError('Failed to load dashboard data');
      console.error('Dashboard error:', err);
    } finally {
      setLoading(false);
    }
  };

  const formatStatsByPeriod = (stats) => {
    return stats.map(stat => {
      let label = '';
      if (selectedPeriod === 'week') {
        label = `W${stat._id.week} ${stat._id.year}`;
      } else if (selectedPeriod === 'month') {
        const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        label = `${months[stat._id.month - 1]} ${stat._id.year}`;
      } else if (selectedPeriod === 'quarter') {
        label = `Q${stat._id.quarter} ${stat._id.year}`;
      }
      
      return {
        period: label,
        total: stat.totalInteractions,
        emails: stat.emails,
        meetings: stat.meetings,
        calls: stat.calls,
        notes: stat.notes,
        avgPriority: Math.round(stat.avgPriority * 20) // Convert to 0-100 scale
      };
    });
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'active': return '#10B981';
      case 'prospect': return '#F59E0B';
      case 'inactive': return '#EF4444';
      case 'closed': return '#6B7280';
      default: return '#8B5CF6';
    }
  };

  const getPriorityColor = (priority) => {
    if (priority >= 4) return '#EF4444'; // High priority - red
    if (priority >= 3) return '#F59E0B'; // Medium priority - yellow
    return '#10B981'; // Low priority - green
  };

  const formatEngagementDistribution = () => {
    if (!dashboardData?.engagement?.distribution) return [];
    
    return dashboardData.engagement.distribution.map((bucket, index) => {
      const ranges = ['0-20', '20-40', '40-60', '60-80', '80-100'];
      return {
        name: ranges[index] || 'Other',
        value: bucket.count,
        color: `hsl(${index * 60}, 70%, 50%)`
      };
    });
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-50 border border-red-200 rounded-md p-4">
        <div className="text-red-800">{error}</div>
        <button 
          onClick={loadDashboardData}
          className="mt-2 text-red-600 hover:text-red-800 underline"
        >
          Retry
        </button>
      </div>
    );
  }

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold text-gray-900">Dashboard</h1>
        <div className="flex space-x-2">
          <select
            value={selectedPeriod}
            onChange={(e) => setSelectedPeriod(e.target.value)}
            className="border border-gray-300 rounded-md px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="week">Weekly</option>
            <option value="month">Monthly</option>
            <option value="quarter">Quarterly</option>
          </select>
        </div>
      </div>

      {/* Key Metrics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div className="bg-white p-6 rounded-lg shadow-md border border-gray-200">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Total Clients</p>
              <p className="text-3xl font-bold text-gray-900">{dashboardData?.clients?.total || 0}</p>
            </div>
            <div className="p-3 bg-blue-100 rounded-full">
              <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.196-2.121M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.196-2.121M7 20v-2m3-7a3 3 0 110-6 3 3 0 010 6m4 0a3 3 0 110-6 3 3 0 010 6" />
              </svg>
            </div>
          </div>
        </div>

        <div className="bg-white p-6 rounded-lg shadow-md border border-gray-200">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Total Interactions</p>
              <p className="text-3xl font-bold text-gray-900">{dashboardData?.interactions?.total || 0}</p>
            </div>
            <div className="p-3 bg-green-100 rounded-full">
              <svg className="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
              </svg>
            </div>
          </div>
        </div>

        <div className="bg-white p-6 rounded-lg shadow-md border border-gray-200">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Follow-ups Due</p>
              <p className="text-3xl font-bold text-gray-900">{dashboardData?.followUps?.due || 0}</p>
            </div>
            <div className="p-3 bg-yellow-100 rounded-full">
              <svg className="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
          </div>
        </div>

        <div className="bg-white p-6 rounded-lg shadow-md border border-gray-200">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Overdue Follow-ups</p>
              <p className="text-3xl font-bold text-red-600">{dashboardData?.followUps?.overdue || 0}</p>
            </div>
            <div className="p-3 bg-red-100 rounded-full">
              <svg className="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.268 18.5c-.77.833.192 2.5 1.732 2.5z" />
              </svg>
            </div>
          </div>
        </div>
      </div>

      {/* Charts Section */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Engagement Trends Chart */}
        <div className="bg-white p-6 rounded-lg shadow-md border border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Engagement Trends (30 Days)</h3>
          <ResponsiveContainer width="100%" height={300}>
            <LineChart data={engagementTrends}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="date" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Line 
                type="monotone" 
                dataKey="interactions" 
                stroke="#3B82F6" 
                strokeWidth={2}
                name="Daily Interactions"
              />
              <Line 
                type="monotone" 
                dataKey="avgEngagement" 
                stroke="#10B981" 
                strokeWidth={2}
                name="Avg Engagement Score"
              />
            </LineChart>
          </ResponsiveContainer>
        </div>

        {/* Interactions by Type */}
        <div className="bg-white p-6 rounded-lg shadow-md border border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Interactions by Type</h3>
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie
                data={dashboardData?.interactions?.byType?.map(item => ({
                  name: item._id.charAt(0).toUpperCase() + item._id.slice(1),
                  value: item.count
                }))}
                cx="50%"
                cy="50%"
                labelLine={false}
                label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                outerRadius={80}
                fill="#8884d8"
                dataKey="value"
              >
                {dashboardData?.interactions?.byType?.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={`hsl(${index * 90}, 70%, 50%)`} />
                ))}
              </Pie>
              <Tooltip />
            </PieChart>
          </ResponsiveContainer>
        </div>

        {/* Interaction Statistics by Period */}
        <div className="bg-white p-6 rounded-lg shadow-md border border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">
            Interaction Statistics ({selectedPeriod}ly)
          </h3>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={formatStatsByPeriod(interactionStats)}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="period" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Bar dataKey="emails" stackId="a" fill="#3B82F6" name="Emails" />
              <Bar dataKey="meetings" stackId="a" fill="#10B981" name="Meetings" />
              <Bar dataKey="calls" stackId="a" fill="#F59E0B" name="Calls" />
              <Bar dataKey="notes" stackId="a" fill="#8B5CF6" name="Notes" />
            </BarChart>
          </ResponsiveContainer>
        </div>

        {/* Engagement Score Distribution */}
        <div className="bg-white p-6 rounded-lg shadow-md border border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Engagement Score Distribution</h3>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={formatEngagementDistribution()}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" />
              <YAxis />
              <Tooltip />
              <Bar dataKey="value" fill="#6366F1" />
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* Follow-up Management Section */}
      <div className="mb-6">
        <FollowUpDashboard />
      </div>

      {/* Bottom Section */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Top Clients by Engagement */}
        <div className="bg-white p-6 rounded-lg shadow-md border border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Top Clients by Engagement</h3>
          <div className="space-y-3">
            {dashboardData?.clients?.topEngagement?.map((client, index) => (
              <div key={client._id} className="flex items-center justify-between py-2 px-3 bg-gray-50 rounded-lg">
                <div className="flex items-center space-x-3">
                  <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                    <span className="text-sm font-medium text-blue-600">#{index + 1}</span>
                  </div>
                  <span className="font-medium text-gray-900">{client.name}</span>
                </div>
                <div className="flex items-center space-x-2">
                  <div className="w-20 bg-gray-200 rounded-full h-2">
                    <div 
                      className="bg-blue-600 h-2 rounded-full" 
                      style={{ width: `${client.engagementScore}%` }}
                    ></div>
                  </div>
                  <span className="text-sm font-medium text-gray-600">{client.engagementScore}%</span>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Recent Activity */}
        <div className="bg-white p-6 rounded-lg shadow-md border border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Recent Activity</h3>
          <div className="space-y-3">
            {recentActivity.map((activity) => (
              <div key={activity.id} className="flex items-center space-x-3 py-2 px-3 bg-gray-50 rounded-lg">
                <div className={`w-3 h-3 rounded-full ${getPriorityColor(activity.priority) === '#EF4444' ? 'bg-red-400' : getPriorityColor(activity.priority) === '#F59E0B' ? 'bg-yellow-400' : 'bg-green-400'}`}></div>
                <div className="flex-1 min-w-0">
                  <div className="flex items-center space-x-2">
                    <span className="text-xs font-medium text-gray-500 uppercase tracking-wide">
                      {activity.type}
                    </span>
                    <span className="text-sm text-gray-600">with {activity.client}</span>
                  </div>
                  <p className="text-sm font-medium text-gray-900 truncate">{activity.subject}</p>
                </div>
                <div className="text-xs text-gray-500">
                  {new Date(activity.date).toLocaleDateString()}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;